buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

group "com.bertramlabs.plugins"

// apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java-library'
apply plugin: "org.grails.grails-plugin"

// Used for publishing to central repository, remove if not needed
ext {
    grailsVersion = project.grailsVersion
    websiteUrl = "http://www.asset-pipeline.com"
    vcsUrl = "https://github.com/bertramdev/grails-asset-pipeline/tree/grails3"
    issueTrackerUrl = "https://github.com/bertramdev/grails-asset-pipeline/issues"
}

sourceCompatibility = 1.17
targetCompatibility = 1.17


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if ((details.requested.group == 'org.codehaus.groovy' || details.requested.group == 'org.apache.groovy') && details.requested.name != 'groovy-bom') {
            details.useTarget(group: 'org.apache.groovy', name: details.requested.name, version: "$groovy4Version")
            details.because "The dependency coordinates are changed in Apache Groovy 4, plus ensure version"
        }
    }
}

grails {
    packageAssets = false
}

dependencies {

    implementation platform("org.grails:grails-bom:$grailsVersion")

    implementation project(':asset-pipeline-core')
    implementation 'org.grails:grails-plugin-url-mappings'

    compileOnly 'com.github.ben-manes.caffeine:caffeine' // Cache
    compileOnly 'jakarta.servlet:jakarta.servlet-api' // Provided by the servlet container
    compileOnly 'org.grails:grails-core' // Provided as this is a Grails plugin
    compileOnly 'org.grails:grails-web-taglib' // For taglib compilation

    testImplementation 'org.grails:grails-web-testing-support'
    testImplementation 'org.spockframework:spock-core'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events('passed', 'skipped', 'failed')
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId 'asset-pipeline-grails'
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'asset-pipeline-grails'
                    description 'The Grails Asset-Pipeling plugin providing asset transpiling to grails.'
                    url 'https://github.com/bertramdev/asset-pipeline-core'
                    scm {
                        url 'https://github.com/bertramdev/asset-pipeline-core'
                        connection 'scm:https://bertramdev@github.com/bertramdev/asset-pipeline-core.git'
                        developerConnection 'scm:git://github.com/bertramdev/asset-pipeline-core.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'davydotcom'
                            name 'David Estes'
                            email 'davydotcom@gmail.com'
                        }
                    }
                }
            }
            from components.java
        }
    }

    repositories {
        maven {
            if( !isReleaseVersion ) {
                url = "http://nexus.bertramlabs.com/content/repositories/snapshots"
                if(project.hasProperty('labsNexusUser')) {
                    credentials {
                        username = labsNexusUser
                        password = labsNexusPassword
                    }
                }
            }
        }
    }
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute module("org.codehaus.groovy:groovy") using module('org.apache.groovy:groovy:4.0.22')
        substitute module("org.codehaus.groovy:groovy-templates") using module('org.apache.groovy:groovy-templates:4.0.22')
        substitute module("org.codehaus.groovy:groovy-xml") using module('org.apache.groovy:groovy-xml:4.0.22')
        substitute module("org.codehaus.groovy:groovy-json") using module('org.apache.groovy:groovy-json:4.0.22')
        substitute module("org.codehaus.groovy:groovy-test-junit5") using module('org.apache.groovy:groovy-test-junit5:4.0.22')
    }
}


bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
}

